// P(x) SINCE[min,max] Q(x)

//Inputs
input stream Timestamp(tp:u32, ts:u32)
input stream P(tp:u32, id:u32)
input stream Q(tp:u32, id:u32)


// Could also directly use [min,max], but better for testing
// since we don't have to recompile when changing the intervall
input relation Intervall(min:u32, max:u32) 

// Auxiliary
relation Relevant(ts:u32, id:u32) 
relation Tuple_since(ts:u32, id:u32)

// Needed for output
relation Satisfied_id(tp:u32, id:u32)
output relation Output(tp:u32, ts:u32, id:u32)


Relevant(ts, id)            :- Q'(_,id), Timestamp'(_, ts).
Relevant(ts_old, id)        :- Relevant-1(ts_old, id), Timestamp'(_, ts_new), Intervall(min,max),
                                ts_new - ts_old <= max.

Tuple_since(ts,id)          :- Q'(_,id), Timestamp'(_, ts), not Tuple_since-1(_,id).
Tuple_since(ts,id)          :- Q'(_,id), Timestamp'(_, ts), not P'(_,id).
Tuple_since(ts,id)          :- Tuple_since-1(ts,id), P'(_,id).

Satisfied_id(tp,id)            :- Tuple_since(ts_older,id), Timestamp'(tp,ts_new), Intervall(min,max), 
                                  Relevant(ts_old, id), ts_older <= ts_old, ts_new - ts_old >= min.

Output(tp,ts,id)            :-  Satisfied_id(tp,id), Timestamp'(tp,ts).
Output(tp,ts,id)            :-  Output-1(tp,ts,id). //used to simplify testing

