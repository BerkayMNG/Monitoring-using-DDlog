/*
Using input relations, this prorgam monitors:

PREV[min,max] P(id)

Value specifies the concrete id above in the above formula and 
min max the intervall of the opterator. Rest should be clear.

@Viol_or_sat outputs "Satisfaction" if cat == 1 and Violations if cat == -1
*/

//input 
input stream Timestamp(tp:u32, ts:u32)
input stream P(tp:u32, id:u32)
input relation Intervall(min:u32, max:u32)
input relation Value(id:u32)
input relation Viol_or_sat(cat:s32)

//Auxiliary relation
relation Cached(ts:u32, id:u32)


//determine output
relation Satisfied(tp:u32, ts:u32, id:u32)
relation Violations(tp:u32, ts:u32, id:u32)
output relation Output(tp:u32,ts:u32,id:u32)



Cached(ts,id) :- Timestamp'(_,ts), P'(_,id).


Satisfied(tp,ts_new,id) :- Cached-1(ts_old, id), Timestamp'(tp,ts_new), Intervall(min,max), Value(id),
                             ts_new - ts_old <= max, ts_new - ts_old >= min.


Violations(tp,ts,id) :- Timestamp'(tp,ts), Value(id), not Satisfied(_,_,id).

Output(tp,ts,id) :- Output-1(tp,ts,id). //only for testing purposes needed
Output(tp,ts,id) :- Satisfied(tp,ts,id), Viol_or_sat(cat), cat == 1.
Output(tp,ts,id) :- Violations(tp,ts,id), Viol_or_sat(cat), cat == -1.