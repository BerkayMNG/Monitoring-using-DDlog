
/*
REMARK:
Old version with batching, not needed anymore
*/




//Below: formula PREV[2,4] P(1) (where intervall & id of P can be easily changed)

/*
Check it on https://traytel.bitbucket.io/verimon/
Signature:      p(x)

MFOTL formula:  PREV[2,4] p(1)

Log:            @1 p(1) p(2)
                @2 p(2) p(1)
                @4 p(2) p(3)
                @7 p(1)
*/

//input 
input stream Timestamp(tp:u32, ts:u32)
input stream P(tp:u32, id:u32)

relation Intervall(min:u32, max:u32)
Intervall(2,4) :- .

//Auxiliary relation
relation Cached(ts:u32, id:u32)
relation Value(id:u32)
Value(1) :- .


//output
output relation Satisfied(tp:u32, ts:u32, id:u32)
//output relation Violations(tp:u32, ts:u32, id:u32)



Cached(ts,id) :- Timestamp'(_,ts), P'(_,id).


Satisfied(tp,ts_new,id) :- Cached(ts_old, id), Timestamp'(tp,ts_new), Intervall(min,max), Value(id),
                                ts_new - ts_old <= max, ts_new - ts_old >= min.

//corresponds to negate in VeriMon
//Violations(tp,ts,id) :- Timestamp'(tp,ts), Value(id), not Satisfied(_,_,id).



/*
Below program for formula: PREV[2,4] P(x)
Here VeriMon cannot negate, so no "violations"
*/
/*
input stream Timestamp(tp:u32, ts:u32)
input stream P(tp:u32, id:u32)

relation Intervall(min:u32, max:u32)
Intervall(2,4) :- .

relation Cache(tp:u32, ts:u32, id:u32)



output relation Satisfied(tp:u32, ts:u32, id:u32)

Cache(tp,ts,id) :- Timestamp'(tp,ts), P'(tp,id).
Cache(tp_old,ts_old,id) :- Cache-1(tp_old,ts_old,id), Timestamp'(tp_new,ts_new),
                            tp_old == tp_new -1.


Satisfied(tp_new,ts_new,id) :- Cache(tp_old, ts_old, id), Timestamp'(tp_new,ts_new),Intervall(min,max),
                                ts_new - ts_old <= max, ts_new - ts_old >= min, tp_old == tp_new-1.

*/