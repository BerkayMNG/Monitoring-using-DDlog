// Formula:  P(x) UNTIL[min,max] Q(x)

input stream Timestamp(tp:s32, ts:s32)
input stream P(tp:s32, id:s32)
input stream Q(tp:s32, id:s32)
input relation Intervall(min:s32, max:s32)


output relation Relevant(tp:s32, ts:s32, id:s32)
output relation Tuple_chain(tp:s32, ts:s32, id:s32)


output relation Satisfied_cached(tp:s32, ts:s32, id:s32)
output relation Satisfied(tp:s32, ts:s32, id:s32)

/*
First rule: Cache all P(x)'s 
Second rule Keep all P(x)'s still within the Window/Intervall
*/
Relevant(tp, ts, id)            :- Timestamp'(tp,ts), P'(tp,id).
Relevant(tp, ts, id)            :- Timestamp'(_, ts_new), Relevant-1(tp, ts, id), Intervall(min, max),
                                    ts_new - ts <= max.


/*
General: Tuple_chain stores longest chain of a certain id

First rule: Start of a "chain"
Second: update longest "chain" (even if out of the intervall), meaning include it from previous transaction, if still valid 
*/
Tuple_chain(tp,ts,id)                   :- P'(tp,id), Timestamp'(tp,ts), not Tuple_chain-1(_,_,id).
Tuple_chain(tp_old,ts_old,id)           :- P'(_,id), Tuple_chain-1(tp_old,ts_old,id).


/*
Use Satisfied_cached to not directly output a solution, since there could be earlier output which are not detected yes since
their Q occurs later (thanks to Joshua).

First rule & second rule: store all satisfying ids. We don't need ts_new - ts <= max, since we join with Relevant

Third rule: Special case where we have [0,0]
*/
Satisfied_cached(tp,ts,id)          :- Satisfied_cached-1(tp,ts,id).
Satisfied_cached(tp,ts,id)          :- Timestamp'(tp_new,ts_new), Q'(tp_new, id), Tuple_chain-1(tp_old,ts_old,id), 
                                        Intervall(min,max), Relevant(tp,ts,id), tp_old <= tp, tp < tp_new, 
                                        ts_new - ts >= min.

Satisfied_cached(tp,ts,id)          :- Timestamp'(tp,ts), Q'(tp, id), Intervall(min,max), min == 0.

// Use this to maintain correct output order
Satisfied(tp,ts,id) :- Satisfied_cached(tp,ts,id), Timestamp'(tp_new, ts_new), Intervall(min,max), ts_new - ts > max.