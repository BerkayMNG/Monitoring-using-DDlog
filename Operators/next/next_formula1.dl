//Formula NEXT[min,max] P(id), similar to PREV operator

//input 
input stream Timestamp(tp:u32, ts:u32)
input stream P(tp:u32, id:u32)

//Auxiliary relation
input relation Intervall(min:u32, max:u32)
input relation Value(id:u32)

// -1 for outputing violation, 1 for satisfied
input relation Viol_or_sat(cat:s32)

//stores timestamps
relation Cache(ts:u32)


//output
relation Satisfied(tp:u32, ts:u32, id:u32)
relation Violations(tp:u32, ts:u32, id:u32)
output relation Output(tp:u32, ts:u32, id:u32)


//store timestamps, needed because of intervall
Cache(ts) :- Timestamp'(_,ts).

//
Satisfied(tp-1,ts_old,id) :- Cache-1(ts_old),  Timestamp'(tp, ts_new), P'(tp,id), Intervall(min,max), 
                            Value(id), ts_new - ts_old <= max, ts_new - ts_old >= min.
Violations(tp-1,ts_old,id) :- Cache-1(ts_old), Value(id), Timestamp'(tp, ts_new), not Satisfied(_,_,id).


Output(tp,ts,id) :- Output-1(tp,ts,id). //only for testing purposes needed
Output(tp,ts,id) :- Viol_or_sat(cat), cat == 1, Satisfied(tp,ts,id).
Output(tp,ts,id) :- Viol_or_sat(cat), cat == -1, Violations(tp,ts,id).