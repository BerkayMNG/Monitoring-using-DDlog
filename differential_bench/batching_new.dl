input stream Timestamp(tp:u32, ts:s32)
input stream P(tp:u32, id:u32)
input stream Q(tp:u32, id:u32)

relation Once_P_state(ts:s32, id:u32)
relation Once_P(ap:u32, id:u32)
relation Once_Q_state(ts:s32, id:u32)
relation Once_Q(ap:u32, id:u32)
output relation Report(ap:u32, ts:s32, id:u32)

Once_P(ap, id)           :- Timestamp'(tp, ts_old), P'(tp, id),
                            Timestamp'(ap, ts_new), ap >= tp, ts_new - 10 <= ts_old.
Once_P(ap, id)           :- Once_P_state-1(ts_old, id), Timestamp'(ap, ts_new),
                            ts_new - 10 <= ts_old.

Once_P_state(max_ts, id) :- P'(tp, id), Timestamp'(tp, ts),
                            var max_ts = ts.group_by((id)).max().
Once_P_state(ts_old, id) :- Once_P_state-1(ts_old, id), Timestamp'(_, ts_new),
                            ts_new - 10 <= ts_old, not P'(_, id).

Once_Q(ap, id)           :- Timestamp'(tp, ts_old), Q'(tp, id),
                            Timestamp'(ap, ts_new), ap >= tp, ts_new - 10 <= ts_old.
Once_Q(ap, id)           :- Once_Q_state-1(ts_old, id), Timestamp'(ap, ts_new),
                            ts_new - 10 <= ts_old.

Once_Q_state(max_ts, id) :- Q'(tp, id), Timestamp'(tp, ts),
                            var max_ts = ts.group_by((id)).max().
Once_Q_state(ts_old, id) :- Once_Q_state-1(ts_old, id), Timestamp'(_, ts_new),
                            ts_new - 10 <= ts_old, not Q'(_, id).

Report(ap, ts, id)       :- Timestamp'(ap, ts), Once_P(ap, id), not Once_Q(ap, id).
