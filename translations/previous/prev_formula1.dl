//Formula PREV[2,4] P(1) (where intervall & id of P can be easily changed)

//input 
input stream Timestamp(tp:s32, ts:s32)
input stream P(tp:s32, id:s32)

input relation Intervall(min:s32, max:s32)
input relation Value(id:s32)
input relation Viol_or_sat(id:s32)

//Auxiliary relation
relation Cache(tp:s32, ts:s32, id:s32)
relation Satisfied_cache(tp:s32, ts:s32, id:s32) //only needed for testing purposes

//output
output relation Satisfied(tp:s32, ts:s32, id:s32)
output relation Violations(tp:s32, ts:s32, id:s32)

/*
First rule: get new tuples from batch
Second rule: Tuples from previous transaction which might be needed
*/
Cache(tp,ts,id) :- Timestamp'(tp,ts), P'(tp,id).
Cache(tp_old,ts_old,id) :- Cache-1(tp_old,ts_old,id), Timestamp'(tp_new,ts_new),
                            tp_old == tp_new -1.


Satisfied_cache(tp_new,ts_new,id) :- Cache(tp_old, ts_old, id), Timestamp'(tp_new,ts_new), 
                                Intervall(min,max), Value(id),
                                ts_new - ts_old <= max, ts_new - ts_old >= min, tp_old == tp_new-1.

Satisfied(tp,ts,id) :- Satisfied-1(tp,ts,id).
Satisfied(tp,ts,id) :- Satisfied_cache(tp,ts,id), Viol_or_sat(outpt), outpt == 1.

//corresponds to negate in VeriMon
Violations(tp,ts,id) :- Violations-1(tp,ts,id).
Violations(tp,ts,id) :- Timestamp'(tp,ts), Value(id), not Satisfied_cache(tp,_,id),Viol_or_sat(outpt), outpt == -1,.