//Below: formula PREV[2,4] P(1) (where intervall & id of P can be easily changed)

/*
Check it on https://traytel.bitbucket.io/verimon/
Signature:      p(x)

MFOTL formula:  PREV[2,4] p(1)

Log:            @1 p(1) p(2)
                @2 p(2) p(1)
                @4 p(2) p(3)
                @7 p(1)
*/

//input 
input stream Timestamp(tp:s32, ts:s32)
input stream P(tp:s32, id:s32)

relation Intervall(min:s32, max:s32)
Intervall(2,4) :- .

//Auxiliary relation
relation Cache(tp:s32, ts:s32, id:s32)

relation Value(id:s32)
Value(1) :- .


//output
output relation Satisfied(tp:s32, ts:s32, id:s32)
output relation Violations(tp:s32, ts:s32, id:s32)

/*
First rule: get new tuples from batch
Second rule: Tuples from previous transaction which might be needed
*/
Cache(tp,ts,id) :- Timestamp'(tp,ts), P'(tp,id).
Cache(tp_old,ts_old,id) :- Cache-1(tp_old,ts_old,id), Timestamp'(tp_new,ts_new),
                            tp_old == tp_new -1.


Satisfied(tp_new,ts_new,id) :- Cache(tp_old, ts_old, id), Timestamp'(tp_new,ts_new), 
                                Intervall(min,max), Value(id),
                                ts_new - ts_old <= max, ts_new - ts_old >= min, tp_old == tp_new-1.

//corresponds to negate in VeriMon
Violations(tp,ts,id) :- Timestamp'(tp,ts), Value(id), not Satisfied(tp,_,id).



/*
Below program for formula: PREV[2,4] P(x)
Here VeriMon cannot negate, so no "violations"
*/
/*
input stream Timestamp(tp:s32, ts:s32)
input stream P(tp:s32, id:s32)

relation Intervall(min:s32, max:s32)
Intervall(2,4) :- .

relation Cache(tp:s32, ts:s32, id:s32)



output relation Satisfied(tp:s32, ts:s32, id:s32)

Cache(tp,ts,id) :- Timestamp'(tp,ts), P'(tp,id).
Cache(tp_old,ts_old,id) :- Cache-1(tp_old,ts_old,id), Timestamp'(tp_new,ts_new),
                            tp_old == tp_new -1.


Satisfied(tp_new,ts_new,id) :- Cache(tp_old, ts_old, id), Timestamp'(tp_new,ts_new),Intervall(min,max),
                                ts_new - ts_old <= max, ts_new - ts_old >= min, tp_old == tp_new-1.

*/